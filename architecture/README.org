#+title: DOTMG Architecture
#+description: Document defining the architecture of the dotmg program.
#+date: 22 June 2023
#+author: Amrit

* Goal
THe goal of this program is to keep (dot)files in $HOME version
controlled and in sync using a version control program, such as
~git~. This isn't only specific to files but rather all directories
and files in ~$HOME~.
This document reflects my preferences which will affect the
implementation of the program.

* How to configure ~dotmg~?
The goal is to have a ~config~ file in
~${XDG_CONFIG_HOME}/dotmg/~. My initial goal is to only have
a list of repositories in there and pass other configuration
parameters exist in the user's environment.

A hypothetical list of environment variables that affect ~dotmg~
runtime:
- ~$DOTMG_REPO_DIR~: The directory where the actual git repo exists
	and files listed in ~config~ are copied over and then synced.
- ~$DOTMG_CONFIG_DIR~: The directory where the ~config~ file exits.
	Ideally, if ~$XDG_CONFIG_HOME~ exists, then the variable is set
	optionally set to ~$XDG_CONFIG_HOME/dotmg/~, otherwise it is
	assumed set to ~$HOME/.config/dotmg/~. The /optionally/ here means
	that if the ~$DOTMG_CONFIG_DIR~ variable is set in the user's
	environment then it is directly used without any perviously
	mentioned gymnastics.

An example ~config~ file:
#+NAME: example_config
#+BEGIN_SRC shell
$HOME/.config/sway
$HOME/.config/nvim
$HOME/.emacs.d/
$HOME/.zshrc
$HOME/.zprofile
Pictures/Wallpapers/mountains.png
#+END_SRC

This file contains a newline separated list of files and directories.

* How should ~dotmg~ handle basic syncing of files.
The idea here is to keep either entire directories or files in sync
by copying them over to ~$DOTMG_REPO_DIR~ and then performing a
series of version control commands that would get them ready to
be synced to a remote repository. We could also possibly support
the copying of ~DOTMG_REPO_DIR~ to a local directory as an optional
parameter-to-a-sync-sub-command-that-exists-in-dotmg.

* Adding files
** Usage
Exemplary use of ~dotmg~ may look like as follows:

- ~dotmg add $HOME/.config/nvim~.
- ~dotmg add ~/.ssh~.
- ~dotmg add Pictures/Wallpapers/mountains.png~

** Copying Operation
~dotmg~ shall then strip away the user's ~$HOME~ expansion in path and re-create the directory
structure in ~$DOTMG_REPO_DIR~. For arguments where the home directory is not directly present
in the path, e.g dotmg is run in a sub-directory inside ~$HOME~ then dotmg will simply re-create
the directory structure as-is and not check if the argument is a sub-directory in $HOME.

Example: ~Pictures/Wallpapers~ directory might be present in ~$HOME/Media/Pictures/Wallpapers~,
then dotmg will not create the ~Media~ directory inside ~$DOTMG_REPO_DIR~ and instead create
~Pictures/Wallpapers~ directories and then copy over the ~mountains.png~ file to that directory.

** Maintaining a ~config~
dotmg also maintains a list of "added" directories or files in ~$DOTMG_CONFIG_DIR/config~. When
~dotmg add~ is run, after performing the copy in the aforementioned manner, it checks if the same
argument is present in ~config~, if it is not present then it is added to the newline separated
list. Although, if the file or directory to added isn't present directly in ~$HOME~ but is a sub-
directory, then ~dotmg~ may use ~find~ to locate the full path to that directory/file and then
add it to the ~config~ to make the ~sync~ command's job easier.

* Syncing Files
~dotmg sync~ reads ~$DOTMG_CONFIG_DIR/config~ line by line and performs the same copying operation as
~dotmg add~ and then it could either of the following operations:

- ~git add~ the copied over argument when doing line-by-line read. Commit when operation is finished.
- ~git add .~ the copied over content after everything is done. Now either the ~.~ argument can be
	passed over to git, or ~dotmg~ could create an array and pass it as argument to git which will only
	add and commit the files to the repository. This latter behavior allows some flexibility from the
	user side which I have not explored yet.

dotmg could optionally push to remote as well, I have not decided yet if we want the "push" to
be a separate command or just a part of the ~dotmg sync~ command.
