#!/usr/bin/env bash

# Internal variable that will refer to the $HOME directory
[[ -z "$HOUSE" ]] && declare -g HOUSE=$HOME

# Some basic functions taken from pure-bash-bible by dylan araps.

split() {
		# Usage: split "string" "delimiter" array_var
		local -n arr=$3
		IFS=$'\n' read -d "" -ra arr <<< "${1//$2/$'\n'}"
}

strip-all() {
		# Usage: strip_all "string" "pattern"
		printf '%s\n' "${1//$2}" > .gitignore
}

# dotmg implementation

# utilities

error () {
		printf "dotmg: %s\n" "$@"
		exit
}

check-gitignore-exists() {
		[[ ! (-r ".gitignore" && -w ".gitignore") ]] && \
				error ".gitignore does not exist. Please generate it using init-gitignore or init commands."
}

write-base-gitignore() {
		printf "/*\n" > .gitignore
}

dont-ignore-this-dir() {
		mapfile -t gitignore < .gitignore
		for line in "${gitignore[@]}"; do
				if [[ "$line" == "!$1" ]]; then
						return
				fi
		done		
		
		printf "!%s\n" "$1" >> .gitignore
}

ignore-all-subdirs () {
		mapfile -t gitignore < .gitignore
		for line in "${gitignore[@]}"; do
				if [[ "$line" == "$1/*" ]]; then
						return
				fi
		done		
		
		printf "%s/*\n" "$1" >> .gitignore
}

remove-empty-newlines() {
		IFS=$'\n' read -d "" -ra gitignore < ".gitignore"
		rm .gitignore
		for line in "${gitignore[@]}"; do
				printf "%s\n" "$line" >> .gitignore
		done
}

remove-lines-after() {
		strip-all "$(<.gitignore)" "$1\/*"
}

# dotmg

dotmg-init() {
		cd "$1" || error "init failed"
		git init
		git branch -m main
		write-base-gitignore
}

dotmg-dont-ignore() {
		cd "$HOUSE" || error "could not switch to ${HOUSE}"
		check-gitignore-exists
		dirlist=""
		for arg in "$@"; do
				declare -a dirs
				split "$arg" "/" dirs
				declare -i len=0
				len=${#dirs[@]}-1
				declare -i cnt=0
				for dir in "${dirs[@]}"; do
						dirlist="$dirlist/$dir"
						dont-ignore-this-dir "$dirlist"
						if [[ (( $cnt == "$len" )) ]]; then
								# this is the last arg, therefore we want to track
								# everything in that directory. The remove-line
								# function checks if such a line in .gitignore exists
								# and removes it. It also removes lines with anything
								# after the / in the last arg.

								# Example: gitignore has .config/nvim/init.lua added
								# using dotmg but the directory has other files as
								# well that aren't tracked. Say we perform
								# `dotmg add .config/nvim`, then dotmg will see that
								# the .config/nvim folder is the last argument and thus
								# it's implied everything in that folder is to be tracked
								# it will then remove any lines in gitignore that are as
								# follows:
								# .config/nvim/*
								# !.config/nvim/init.lua
								# !.config/nvim/lua/
								remove-lines-after "$dirlist"
								break
						fi
						ignore-all-subdirs "$dirlist"
						((cnt++))
				done
		done
}

dotmg-run () {
		[[ "$1" == "init" ]] && dotmg-init "$HOUSE" && exit 0
		[[ "$1" == "init-gitignore" ]] && write-base-gitignore && exit 0
		[[ "$1" == "add" ]] && shift && dotmg-dont-ignore "$@" && remove-empty-newlines && exit 0
		[[ "$1" == "clean-newlines" ]] && check-gitignore-exists && remove-empty-newlines && exit 0 # seems useless right now. might remove later.
}

dotmg-run "$@"
